// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: meauserments.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createMeasurement = `-- name: CreateMeasurement :one
INSERT INTO measurements (id, measurement_time, humidity, temperature)
VALUES ($1, $2, $3, $4)
RETURNING id, measurement_time, humidity, temperature
`

type CreateMeasurementParams struct {
	ID              uuid.UUID
	MeasurementTime time.Time
	Humidity        float64
	Temperature     float64
}

func (q *Queries) CreateMeasurement(ctx context.Context, arg CreateMeasurementParams) (Measurement, error) {
	row := q.db.QueryRowContext(ctx, createMeasurement,
		arg.ID,
		arg.MeasurementTime,
		arg.Humidity,
		arg.Temperature,
	)
	var i Measurement
	err := row.Scan(
		&i.ID,
		&i.MeasurementTime,
		&i.Humidity,
		&i.Temperature,
	)
	return i, err
}

const getMeasurements = `-- name: GetMeasurements :many
SELECT id, measurement_time, humidity, temperature FROM measurements
`

func (q *Queries) GetMeasurements(ctx context.Context) ([]Measurement, error) {
	rows, err := q.db.QueryContext(ctx, getMeasurements)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Measurement
	for rows.Next() {
		var i Measurement
		if err := rows.Scan(
			&i.ID,
			&i.MeasurementTime,
			&i.Humidity,
			&i.Temperature,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
